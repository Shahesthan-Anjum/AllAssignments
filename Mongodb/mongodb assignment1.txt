> show dbs
admin       0.000GB
config      0.000GB
first-test  0.000GB
local       0.000GB
test        0.000GB

> use first-test
switched to db first-test

> db.create.collection('movies')
uncaught exception: TypeError: db.create.collection is not a function :
@(shell):1:1

> db.create.Collection('movies')
uncaught exception: TypeError: db.create.Collection is not a function :
@(shell):1:1

> db.createCollection('movies')
{ "ok" : 1 }

> show collections

movies

usdb.movies.insert({title:"Fight Club", writer: "Chuck Palahniuk", year: "1999", actors:["Brad Pitt", "Edward Norton"]})
WriteResult({ "nInserted" : 1 }) Club", writer: "Chuck Palahniuk", year: "1999", actors:["Brad Pitt", "Edward Norton"]})
>  db.movies.insert({title:"Pulp Fiction", writer:"Quentin Tarantino", year:"2009", actors:["John Travolta", "Uma Thurman"]})
WriteResult({ "nInserted" : 1 })
> db.movies.insert({title:"Inglorious Basterds", writer:"Quentin Tarantino", year:"2009", actors:["Brad Pitt", "Diane Kruger", "Eli Roth"]})
WriteResult({ "nInserted" : 1 })
> db.movies.insert({title:"The Hobbit: An unexpected Journey", writer:"J.R.R. Tolkein", year:"2012",franchise:"The Hobbit"})
WriteResult({ "nInserted" : 1 })
> db.movies.insert({title:"The Hobbit: The Desolation of Smaug", writer:"J.R.R Tolkien", year:"2013", franchise:"The Hobbit"})
WriteResult({ "nInserted" : 1 })
> db.movies.insert({title:"The Hobbit: The Battle of the Five Armies", writer:"J.R.R Tolkien", year:"2002", franchise:"The Hobbit", synopsis:"Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness."})
WriteResult({ "nInserted" : 1 })
> db.movies.insert({title:"Pee Wee Herman's Big Adventures"})
WriteResult({ "nInserted" : 1 })
> db.movies.insert({title:"Avatar"})
WriteResult({ "nInserted" : 1 })
>
> db.movies.find()
>
{ "_id" : ObjectId("620caa3e1dc079d8405851d0"), "title" : "Fight Club", "writer" : "Chuck Palahniuk", "year" : "1999", "actors" : [ "Brad Pitt", "Edward Norton" ] }
{ "_id" : ObjectId("620caa5c1dc079d8405851d1"), "title" : "Pulp Fiction", "writer" : "Quentin Tarantino", "year" : "2009", "actors" : [ "John Travolta", "Uma Thurman" ] }
{ "_id" : ObjectId("620caa9e1dc079d8405851d2"), "title" : "Inglorious Basterds", "writer" : "Quentin Tarantino", "year" : "2009", "actors" : [ "Brad Pitt", "Diane Kruger", "Eli Roth" ] }
{ "_id" : ObjectId("620caab21dc079d8405851d3"), "title" : "The Hobbit: An unexpected Journey", "writer" : "J.R.R. Tolkein", "year" : "2012", "franchise" : "The Hobbit" }
{ "_id" : ObjectId("620caac31dc079d8405851d4"), "title" : "The Hobbit: The Desolation of Smaug", "writer" : "J.R.R Tolkien", "year" : "2013", "franchise" : "The Hobbit" }
{ "_id" : ObjectId("620caae61dc079d8405851d5"), "title" : "The Hobbit: The Battle of the Five Armies", "writer" : "J.R.R Tolkien", "year" : "2002", "franchise" : "The Hobbit", "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness." }
{ "_id" : ObjectId("620caaf41dc079d8405851d6"), "title" : "Pee Wee Herman's Big Adventures" }
{ "_id" : ObjectId("620cab011dc079d8405851d7"), "title" : "Avatar" }
>
> db.movies.find({writer:"Quentin Tarantino"})
>
{ "_id" : ObjectId("620caa5c1dc079d8405851d1"), "title" : "Pulp Fiction", "writer" : "Quentin Tarantino", "year" : "2009", "actors" : [ "John Travolta", "Uma Thurman" ] }
{ "_id" : ObjectId("620caa9e1dc079d8405851d2"), "title" : "Inglorious Basterds", "writer" : "Quentin Tarantino", "year" : "2009", "actors" : [ "Brad Pitt", "Diane Kruger", "Eli Roth" ] }
>
> db.movies.find({actors:"Brad Pitt"})
>
{ "_id" : ObjectId("620caa3e1dc079d8405851d0"), "title" : "Fight Club", "writer" : "Chuck Palahniuk", "year" : "1999", "actors" : [ "Brad Pitt", "Edward Norton" ] }
{ "_id" : ObjectId("620caa9e1dc079d8405851d2"), "title" : "Inglorious Basterds", "writer" : "Quentin Tarantino", "year" : "2009", "actors" : [ "Brad Pitt", "Diane Kruger", "Eli Roth" ] }
>
> db.movies.find({franchise:"The Hobbit"})
>
{ "_id" : ObjectId("620caab21dc079d8405851d3"), "title" : "The Hobbit: An unexpected Journey", "writer" : "J.R.R. Tolkein", "year" : "2012", "franchise" : "The Hobbit" }
{ "_id" : ObjectId("620caac31dc079d8405851d4"), "title" : "The Hobbit: The Desolation of Smaug", "writer" : "J.R.R Tolkien", "year" : "2013", "franchise" : "The Hobbit" }
{ "_id" : ObjectId("620caae61dc079d8405851d5"), "title" : "The Hobbit: The Battle of the Five Armies", "writer" : "J.R.R Tolkien", "year" : "2002", "franchise" : "The Hobbit", "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness." }
>
> db.movies.find({year:{$gt:"1990", $lt:"2000"}})
>
{ "_id" : ObjectId("620caa3e1dc079d8405851d0"), "title" : "Fight Club", "writer" : "Chuck Palahniuk", "year" : "1999", "actors" : [ "Brad Pitt", "Edward Norton" ] }
>
> db.movies.find({$or:[{year:{$gt:"2010"}},{year: {$lt:"2000"}}]})
>
{ "_id" : ObjectId("620caa3e1dc079d8405851d0"), "title" : "Fight Club", "writer" : "Chuck Palahniuk", "year" : "1999", "actors" : [ "Brad Pitt", "Edward Norton" ] }
{ "_id" : ObjectId("620caab21dc079d8405851d3"), "title" : "The Hobbit: An unexpected Journey", "writer" : "J.R.R. Tolkein", "year" : "2012", "franchise" : "The Hobbit" }
{ "_id" : ObjectId("620caac31dc079d8405851d4"), "title" : "The Hobbit: The Desolation of Smaug", "writer" : "J.R.R Tolkien", "year" : "2013", "franchise" : "The Hobbit" }
>
> db.movies.update({_id:ObjectId("620caab21dc079d8405851d3")}, {$set:{synopsis:"A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
>
>db.movies.update({_id:ObjectId("620caac31dc079d8405851d4")}, {$set:{synopsis:"The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
>
> db.movies.update({_id:ObjectId("620caa5c1dc079d8405851d1")}, {$push:{actors:"Samuel L. Jackson"}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
>
 db.movies.find({synopsis:{$regex:"Bilbo"}})
{ "_id" : ObjectId("620caab21dc079d8405851d3"), "title" : "The Hobbit: An unexpected Journey", "writer" : "J.R.R. Tolkein", "year" : "2012", "franchise" : "The Hobbit", "synopsis" : "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug." }
{ "_id" : ObjectId("620caac31dc079d8405851d4"), "title" : "The Hobbit: The Desolation of Smaug", "writer" : "J.R.R Tolkien", "year" : "2013", "franchise" : "The Hobbit", "synopsis" : "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring." }
{ "_id" : ObjectId("620caae61dc079d8405851d5"), "title" : "The Hobbit: The Battle of the Five Armies", "writer" : "J.R.R Tolkien", "year" : "2002", "franchise" : "The Hobbit", "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness." }
>
> db.movies.find({synopsis:{$regex:"Gandalf"}})
{ "_id" : ObjectId("620caac31dc079d8405851d4"), "title" : "The Hobbit: The Desolation of Smaug", "writer" : "J.R.R Tolkien", "year" : "2013", "franchise" : "The Hobbit", "synopsis" : "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring." }
>
>db.movies.find({$and:[{synopsis:{$regex:"Bilbo"}}, {synopsis:{$not:/Gandalf/}}]})
{ "_id" : ObjectId("620caab21dc079d8405851d3"), "title" : "The Hobbit: An unexpected Journey", "writer" : "J.R.R. Tolkein", "year" : "2012", "franchise" : "The Hobbit", "synopsis" : "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug." }
{ "_id" : ObjectId("620caae61dc079d8405851d5"), "title" : "The Hobbit: The Battle of the Five Armies", "writer" : "J.R.R Tolkien", "year" : "2002", "franchise" : "The Hobbit", "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness." }
>
> db.movies.find({$and:[{synopsis:{$regex:"gold"}}, {synopsis:{$regex:"dragon"}}]})
{ "_id" : ObjectId("620caab21dc079d8405851d3"), "title" : "The Hobbit: An unexpected Journey", "writer" : "J.R.R. Tolkein", "year" : "2012", "franchise" : "The Hobbit", "synopsis" : "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug." }
>
>
> db.movies.remove({_id:ObjectId("620caaf41dc079d8405851d6")})
WriteResult({ "nRemoved" : 1 })
>
> db.movies.remove({_id:ObjectId("620cab011dc079d8405851d7")})
WriteResult({ "nRemoved" : 1 })
>
> db.users.insert({_id:1,username:"GoodGuyGreg", first_name:"Good Guy", last_name:"Greg"})
WriteResult({ "nInserted" : 1 })
>
> db.users.insert({_id:2, username:"ScumbagSteve", fullname:{first: "Scumbag", last:"Steve"}})
WriteResult({ "nInserted" : 1 })
>
> db.posts.insert({username:"GoodGuyGreg", title:"Passes out at Party", body:"Raises your credit score"})
WriteResult({ "nInserted" : 1 })
>
> db.posts.insert({ username:"GoodGuyGreg", title:"Steals your identity", body:"Raises your credit score"})
WriteResult({ "nInserted" : 1 })
>
> db.posts.insert({username:"GoodGuyGreg", title:"Reports a bug in your code", body:"Sends you a pull request"})
WriteResult({ "nInserted" : 1 })
>
> db.posts.insert({ username:"ScumbagSteve", title:"Borrows something", body:"Sells it"})
WriteResult({ "nInserted" : 1 })
>
> db.posts.insert({ username:"ScumbagSteve", title:"Borrows everything", body:"The end"})
WriteResult({ "nInserted" : 1 })
>
> db.posts.insert({username:"ScumbagSteve", title:"Forks your repo on github", body:"Sets to private"})
WriteResult({ "nInserted" : 1 })
>
>
>
>> db.comments.insert({ username:"GoodGuyGreg", comment:"Hope you got a good deal!", post:ObjectId("620ceea44bb00835e184f7f4")})
WriteResult({ "nInserted" : 1 })
>
> db.comments.insert({username:"GoodGuyGreg", comment:"What's mine is yours!", post:ObjectId("620ceecd4bb00835e184f7f5")})
WriteResult({ "nInserted" : 1 })
>
> db.comments.insert({username:"GoodGuyGreg", comment:"Don't violate the licensing agreement!", post:ObjectId("620ceed94bb00835e184f7f6")})
WriteResult({ "nInserted" : 1 })
>
> db.comments.insert({username:"ScumbagSteve", comment:"It still isn't clean", post:ObjectId("620cee574bb00835e184f7f1")})
WriteResult({ "nInserted" : 1 })
>
> db.comments.insert({username:"ScumbagSteve", comment:"Denied your PR cause I found a hack", post:ObjectId("620cee714bb00835e184f7f3")})
WriteResult({ "nInserted" : 1 })
>
>
>
>> db.users.find().pretty()
{
        "_id" : 1,
        "username" : "GoodGuyGreg",
        "first_name" : "Good Guy",
        "last_name" : "Greg"
}
{
        "_id" : 2,
        "username" : "ScumbagSteve",
        "fullname" : {
                "first" : "Scumbag",
                "last" : "Steve"
        }
}
>
>
>
>> db.posts.find().pretty()
{
        "_id" : ObjectId("620cee574bb00835e184f7f1"),
        "username" : "GoodGuyGreg",
        "title" : "Passes out at Party",
        "body" : "Raises your credit score"
}
{
        "_id" : ObjectId("620cee624bb00835e184f7f2"),
        "username" : "GoodGuyGreg",
        "title" : "Steals your identity",
        "body" : "Raises your credit score"
}
{
        "_id" : ObjectId("620cee714bb00835e184f7f3"),
        "username" : "GoodGuyGreg",
        "title" : "Reports a bug in your code",
        "body" : "Sends you a pull request"
}
{
        "_id" : ObjectId("620ceea44bb00835e184f7f4"),
        "username" : "ScumbagSteve",
        "title" : "Borrows something",
        "body" : "Sells it"
}
{
        "_id" : ObjectId("620ceecd4bb00835e184f7f5"),
        "username" : "ScumbagSteve",
        "title" : "Borrows everything",
        "body" : "The end"
}
{
        "_id" : ObjectId("620ceed94bb00835e184f7f6"),
        "username" : "ScumbagSteve",
        "title" : "Forks your repo on github",
        "body" : "Sets to private"
}
>
>
>
>
> db.posts.find({username:"GoodGuyGreg"})
{ "_id" : ObjectId("620cee574bb00835e184f7f1"), "username" : "GoodGuyGreg", "title" : "Passes out at Party", "body" : "Raises your credit score" }
{ "_id" : ObjectId("620cee624bb00835e184f7f2"), "username" : "GoodGuyGreg", "title" : "Steals your identity", "body" : "Raises your credit score" }
{ "_id" : ObjectId("620cee714bb00835e184f7f3"), "username" : "GoodGuyGreg", "title" : "Reports a bug in your code", "body" : "Sends you a pull request" }
>
>
>
>
>> db.posts.find({username:"ScumbagSteve"})
{ "_id" : ObjectId("620ceea44bb00835e184f7f4"), "username" : "ScumbagSteve", "title" : "Borrows something", "body" : "Sells it" }
{ "_id" : ObjectId("620ceecd4bb00835e184f7f5"), "username" : "ScumbagSteve", "title" : "Borrows everything", "body" : "The end" }
{ "_id" : ObjectId("620ceed94bb00835e184f7f6"), "username" : "ScumbagSteve", "title" : "Forks your repo on github", "body" : "Sets to private" }
>
>
>
>
>> db.comments.find().pretty()
{
        "_id" : ObjectId("620cf0773828db24930a36a5"),
        "username" : "GoodGuyGreg",
        "comment" : "Hope you got a good deal!",
        "post" : ObjectId("620ceea44bb00835e184f7f4")
}
{
        "_id" : ObjectId("620cf0b03828db24930a36a6"),
        "username" : "GoodGuyGreg",
        "comment" : "What's mine is yours!",
        "post" : ObjectId("620ceecd4bb00835e184f7f5")
}
{
        "_id" : ObjectId("620cf0dd3828db24930a36a7"),
        "username" : "GoodGuyGreg",
        "comment" : "Don't violate the licensing agreement!",
        "post" : ObjectId("620ceed94bb00835e184f7f6")
}
{
        "_id" : ObjectId("620cf1073828db24930a36a8"),
        "username" : "ScumbagSteve",
        "comment" : "It still isn't clean",
        "post" : ObjectId("620cee574bb00835e184f7f1")
}
{
        "_id" : ObjectId("620cf12b3828db24930a36a9"),
        "username" : "ScumbagSteve",
        "comment" : "Denied your PR cause I found a hack",
        "post" : ObjectId("620cee714bb00835e184f7f3")
}
>
>
>
>
>> db.comments.find({username:"GoodGuyGreg"})
{ "_id" : ObjectId("620cf0773828db24930a36a5"), "username" : "GoodGuyGreg", "comment" : "Hope you got a good deal!", "post" : ObjectId("620ceea44bb00835e184f7f4") }
{ "_id" : ObjectId("620cf0b03828db24930a36a6"), "username" : "GoodGuyGreg", "comment" : "What's mine is yours!", "post" : ObjectId("620ceecd4bb00835e184f7f5") }
{ "_id" : ObjectId("620cf0dd3828db24930a36a7"), "username" : "GoodGuyGreg", "comment" : "Don't violate the licensing agreement!", "post" : ObjectId("620ceed94bb00835e184f7f6") }
>
>
>
>
> db.comments.find({username:"ScumbagSteve"})
{ "_id" : ObjectId("620cf1073828db24930a36a8"), "username" : "ScumbagSteve", "comment" : "It still isn't clean", "post" : ObjectId("620cee574bb00835e184f7f1") }
{ "_id" : ObjectId("620cf12b3828db24930a36a9"), "username" : "ScumbagSteve", "comment" : "Denied your PR cause I found a hack", "post" : ObjectId("620cee714bb00835e184f7f3") }
>
>
>
>






